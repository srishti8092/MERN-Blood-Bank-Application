{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport API from \"../../../services/API\";\n\n//login\nexport const userLogin = createAsyncThunk(\"auth/login\", async (_ref, _ref2) => {\n  let {\n    role,\n    email,\n    password\n  } = _ref;\n  let {\n    rejectWithValue\n  } = _ref2;\n  try {\n    const {\n      data\n    } = await API.post(\"/auth/login\", {\n      role,\n      email,\n      password\n    });\n    //store token\n    if (data.success) {\n      alert(data.message);\n      localStorage.setItem(\"token\", data.token);\n      toast.success(data.message);\n      //window.location.replace(\"/\");\n    }\n\n    return data;\n  } catch (error) {\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      return rejectWithValue(error.message);\n    }\n  }\n});\n\n//register\nexport const userRegister = createAsyncThunk(\"auth/register\", async (_ref3, _ref4) => {\n  let {\n    name,\n    role,\n    email,\n    password,\n    phone,\n    organisationName,\n    address,\n    hospitalName,\n    website\n  } = _ref3;\n  let {\n    rejectWithValue\n  } = _ref4;\n  try {\n    const {\n      data\n    } = await API.post(\"/auth/register\", {\n      name,\n      role,\n      email,\n      password,\n      phone,\n      organisationName,\n      address,\n      hospitalName,\n      website\n    });\n    if (data !== null && data !== void 0 && data.success) {\n      alert(\"User Registerd Successfully\");\n      toast.success(\"User Registerd Successfully\");\n      window.location.replace(\"/login\");\n    }\n  } catch (error) {\n    console.log(error);\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      return rejectWithValue(error.message);\n    }\n  }\n});","map":{"version":3,"names":["createAsyncThunk","toast","API","userLogin","_ref","_ref2","role","email","password","rejectWithValue","data","post","success","alert","message","localStorage","setItem","token","error","response","userRegister","_ref3","_ref4","name","phone","organisationName","address","hospitalName","website","window","location","replace","console","log"],"sources":["C:/Users/Srishti/Desktop/Projects/MERN-Blood Bank App/frontend/src/redux/features/auth/authActions.js"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { toast } from \"react-toastify\";\r\nimport API from \"../../../services/API\";\r\n\r\n//login\r\nexport const userLogin = createAsyncThunk(\r\n  \"auth/login\",\r\n  async ({ role, email, password }, { rejectWithValue }) => {\r\n    try {\r\n      const { data } = await API.post(\"/auth/login\", { role, email, password });\r\n      //store token\r\n      if (data.success) {\r\n        alert(data.message);\r\n        localStorage.setItem(\"token\", data.token);\r\n        toast.success(data.message);\r\n        //window.location.replace(\"/\");\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      if (error.response && error.response.data.message) {\r\n        return rejectWithValue(error.response.data.message);\r\n      } else {\r\n        return rejectWithValue(error.message);\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\n//register\r\nexport const userRegister = createAsyncThunk(\r\n  \"auth/register\",\r\n  async (\r\n    {\r\n      name,\r\n      role,\r\n      email,\r\n      password,\r\n      phone,\r\n      organisationName,\r\n      address,\r\n      hospitalName,\r\n      website,\r\n    },\r\n    { rejectWithValue }\r\n  ) => {\r\n    try {\r\n      const { data } = await API.post(\"/auth/register\", {\r\n        name,\r\n        role,\r\n        email,\r\n        password,\r\n        phone,\r\n        organisationName,\r\n        address,\r\n        hospitalName,\r\n        website,\r\n      });\r\n      if (data?.success) {\r\n        alert(\"User Registerd Successfully\");\r\n        toast.success(\"User Registerd Successfully\");\r\n        window.location.replace(\"/login\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      if (error.response && error.response.data.message) {\r\n        return rejectWithValue(error.response.data.message);\r\n      } else {\r\n        return rejectWithValue(error.message);\r\n      }\r\n    }\r\n  }\r\n);\r\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,GAAG,MAAM,uBAAuB;;AAEvC;AACA,OAAO,MAAMC,SAAS,GAAGH,gBAAgB,CACvC,YAAY,EACZ,OAAAI,IAAA,EAAAC,KAAA,KAA0D;EAAA,IAAnD;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAAJ,IAAA;EAAA,IAAE;IAAEK;EAAgB,CAAC,GAAAJ,KAAA;EACnD,IAAI;IACF,MAAM;MAAEK;IAAK,CAAC,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,aAAa,EAAE;MAAEL,IAAI;MAAEC,KAAK;MAAEC;IAAS,CAAC,CAAC;IACzE;IACA,IAAIE,IAAI,CAACE,OAAO,EAAE;MAChBC,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;MACnBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEN,IAAI,CAACO,KAAK,CAAC;MACzChB,KAAK,CAACW,OAAO,CAACF,IAAI,CAACI,OAAO,CAAC;MAC3B;IACF;;IACA,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACd,IAAIA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACT,IAAI,CAACI,OAAO,EAAE;MACjD,OAAOL,eAAe,CAACS,KAAK,CAACC,QAAQ,CAACT,IAAI,CAACI,OAAO,CAAC;IACrD,CAAC,MAAM;MACL,OAAOL,eAAe,CAACS,KAAK,CAACJ,OAAO,CAAC;IACvC;EACF;AACF,CACF,CAAC;;AAED;AACA,OAAO,MAAMM,YAAY,GAAGpB,gBAAgB,CAC1C,eAAe,EACf,OAAAqB,KAAA,EAAAC,KAAA,KAaK;EAAA,IAZH;IACEC,IAAI;IACJjB,IAAI;IACJC,KAAK;IACLC,QAAQ;IACRgB,KAAK;IACLC,gBAAgB;IAChBC,OAAO;IACPC,YAAY;IACZC;EACF,CAAC,GAAAP,KAAA;EAAA,IACD;IAAEZ;EAAgB,CAAC,GAAAa,KAAA;EAEnB,IAAI;IACF,MAAM;MAAEZ;IAAK,CAAC,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,gBAAgB,EAAE;MAChDY,IAAI;MACJjB,IAAI;MACJC,KAAK;MACLC,QAAQ;MACRgB,KAAK;MACLC,gBAAgB;MAChBC,OAAO;MACPC,YAAY;MACZC;IACF,CAAC,CAAC;IACF,IAAIlB,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEE,OAAO,EAAE;MACjBC,KAAK,CAAC,6BAA6B,CAAC;MACpCZ,KAAK,CAACW,OAAO,CAAC,6BAA6B,CAAC;MAC5CiB,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC,QAAQ,CAAC;IACnC;EACF,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdc,OAAO,CAACC,GAAG,CAACf,KAAK,CAAC;IAClB,IAAIA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACT,IAAI,CAACI,OAAO,EAAE;MACjD,OAAOL,eAAe,CAACS,KAAK,CAACC,QAAQ,CAACT,IAAI,CAACI,OAAO,CAAC;IACrD,CAAC,MAAM;MACL,OAAOL,eAAe,CAACS,KAAK,CAACJ,OAAO,CAAC;IACvC;EACF;AACF,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}